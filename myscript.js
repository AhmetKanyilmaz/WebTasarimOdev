// =====================================================
// GENEL DOM YÃœKLENME OLAYI
// =====================================================
document.addEventListener('DOMContentLoaded', function() {
    // Adam Asmaca oyununu sadece ilgili sayfada baÅŸlat
    if (document.getElementById('oyunAlani')) {
        if (typeof oyunBaslat === 'function') {
            oyunBaslat();
        } else {
            console.warn("Adam Asmaca: oyunBaslat fonksiyonu bulunamadÄ±.");
        }
    }

    // Gezi PlanÄ± Formu iÃ§in olay dinleyici ekle (sadece ilgili sayfada)
    const geziPlaniFormuElementi = document.getElementById('geziPlaniFormu');
    if (geziPlaniFormuElementi) {
        // Sayfa yÃ¼klendiÄŸinde mevcut planlarÄ± localStorage'dan yÃ¼kle
        planlariHafizadanYukle(); // Bu fonksiyon aÅŸaÄŸÄ±da tanÄ±mlÄ±

        geziPlaniFormuElementi.addEventListener('submit', function(event) {
            event.preventDefault(); 

            const planObjesi = {
                gidilecekYer: document.getElementById('gidilecekYer').value,
                baslangicTarihi: document.getElementById('baslangicTarihi').value,
                bitisTarihi: document.getElementById('bitisTarihi').value,
                konaklamaTuru: document.getElementById('konaklamaTuru').value,
                aktiviteler: document.getElementById('aktiviteler').value,
                butceTahmini: document.getElementById('butceTahmini').value,
                ekNotlar: document.getElementById('ekNotlar').value,
                id: Date.now() 
            };

            yeniGeziPlaniEkle(planObjesi); // Bu fonksiyon aÅŸaÄŸÄ±da tanÄ±mlÄ±
            
            geziPlaniFormuElementi.reset(); 
        });
    }

    // YorumlarÄ± gÃ¶sterme (index.html iÃ§in)
    // Bu fonksiyonun index.html'in kendi <script> bloÄŸunda veya
    // burada tanÄ±mlanmÄ±ÅŸ olmasÄ± gerekir.
    if (typeof yorumlariGoster === 'function' && document.getElementById('yorum-listesi')) {
        yorumlariGoster(); 
    } else if (document.getElementById('yorum-listesi')) {
        console.warn("Yorumlar: yorumlariGoster fonksiyonu bulunamadÄ± ama yorum-listesi elementi var.");
    }
});


// =====================================================
// ADAM ASMACA OYUNU KODLARI
// =====================================================
const kelimeAlani_aa = document.getElementById('kelimeAlani'); // Adam asmaca iÃ§in _aa eki
const kalanHakAlani_aa = document.getElementById('kalanHakAlani');
const yanlisHarflerAlani_aa = document.getElementById('yanlisHarflerAlani');
const mesajAlani_aa = document.getElementById('mesajAlani');
const klavyeAlani_aa = document.getElementById('klavye');
const yenidenBaslatBtn_aa = document.getElementById('yenidenBaslat');

const kelimeler_aa = [
    "Ä°STANBUL", "ANKARA", "Ä°ZMÄ°R", "ANTALYA", "TRABZON", "NEVÅžEHÄ°R",
    "MUÄžLA", "DENÄ°ZLÄ°", "ADIYAMAN", "KARABÃœK", "KAPADOKYA", "PAMUKKALE",
    "EFES", "NEMRUT", "UZUNGÃ–L", "YEDÄ°GÃ–LLER", "ÅžÄ°RÄ°NCE", "SAFRANBOLU",
    "AKYAKA", "SEYAHAT", "GEZGÄ°N", "TURÄ°ZM", "HARÄ°TA", "ROTA", "VALÄ°Z",
    "OTEL", "UÃ‡AK", "KÃœLTÃœR", "TARÄ°H", "DOÄžA", "MANZARA"
];
const baslangicHakki_aa = 6;
const turkceHarfler_aa = "ABCÃ‡DEFGÄžHIÄ°JKLMNOÃ–PRSÅžTUÃœVYZ";

let secilenKelimeOyun_aa = '';
let dogruHarflerOyun_aa = [];
let yanlisHarflerOyun_aa = [];
let kalanHaklarOyun_aa = baslangicHakki_aa;
let oyunBitti_aa = false;

function kelimeSecOyun() {
    secilenKelimeOyun_aa = kelimeler_aa[Math.floor(Math.random() * kelimeler_aa.length)].toUpperCase();
    console.log("Adam Asmaca - SeÃ§ilen Kelime:", secilenKelimeOyun_aa);
}

function klavyeOlusturOyun() {
    if (!klavyeAlani_aa) return;
    klavyeAlani_aa.innerHTML = '';
    turkceHarfler_aa.split('').forEach(harf => {
        const button = document.createElement('button');
        button.textContent = harf;
        button.addEventListener('click', () => harfTahminEtOyun(harf, button));
        klavyeAlani_aa.appendChild(button);
    });
}

function kelimeGosterOyun() {
    if (!kelimeAlani_aa || !secilenKelimeOyun_aa) return;
    const gosterilecekKelime = secilenKelimeOyun_aa
        .split('')
        .map(harf => (dogruHarflerOyun_aa.includes(harf) ? harf : '_'))
        .join(' ');
    kelimeAlani_aa.textContent = gosterilecekKelime;
    if (secilenKelimeOyun_aa && !gosterilecekKelime.includes('_')) {
        oyunSonuOyun(true);
    }
}

function durumuGuncelleOyun() {
    if (!yanlisHarflerAlani_aa || !kalanHakAlani_aa) return;
    yanlisHarflerAlani_aa.textContent = `YanlÄ±ÅŸ Harfler: ${yanlisHarflerOyun_aa.join(', ')}`;
    kalanHakAlani_aa.textContent = `Kalan Hak: ${kalanHaklarOyun_aa}`;
    if (kalanHaklarOyun_aa <= 0) {
        oyunSonuOyun(false);
    }
}

function harfTahminEtOyun(harf, button) {
    if (oyunBitti_aa || !button || button.disabled) return;
    harf = harf.toUpperCase();
    if (dogruHarflerOyun_aa.includes(harf) || yanlisHarflerOyun_aa.includes(harf)) {
        return;
    }
    button.disabled = true;
    if (secilenKelimeOyun_aa && secilenKelimeOyun_aa.includes(harf)) {
        dogruHarflerOyun_aa.push(harf);
        kelimeGosterOyun();
    } else {
        yanlisHarflerOyun_aa.push(harf);
        kalanHaklarOyun_aa--;
        durumuGuncelleOyun();
    }
}

function oyunSonuOyun(kazandiMi) {
    if (!mesajAlani_aa || !klavyeAlani_aa || !yenidenBaslatBtn_aa) return;
    oyunBitti_aa = true;
    if (kazandiMi) {
        mesajAlani_aa.textContent = 'Tebrikler! KazandÄ±nÄ±z! ðŸŽ‰';
        mesajAlani_aa.style.color = 'green';
    } else {
        mesajAlani_aa.textContent = `Kaybettiniz! ðŸ˜ž DoÄŸru kelime: ${secilenKelimeOyun_aa}`;
        mesajAlani_aa.style.color = 'red';
    }
    klavyeAlani_aa.querySelectorAll('button').forEach(btn => {
        btn.disabled = true;
    });
    yenidenBaslatBtn_aa.style.display = 'inline-block';
}

function oyunBaslat() { // Bu fonksiyon globalde kalabilir, DOMContentLoaded iÃ§inde Ã§aÄŸrÄ±lÄ±r
    if (!document.getElementById('oyunAlani')) return;
    console.log("Adam Asmaca oyunu baÅŸlatÄ±lÄ±yor...");
    oyunBitti_aa = false;
    dogruHarflerOyun_aa = [];
    yanlisHarflerOyun_aa = [];
    kalanHaklarOyun_aa = baslangicHakki_aa;
    if (mesajAlani_aa) mesajAlani_aa.textContent = '';
    if (yenidenBaslatBtn_aa) yenidenBaslatBtn_aa.style.display = 'none';
    
    kelimeSecOyun();
    if (secilenKelimeOyun_aa) {
        klavyeOlusturOyun();
        kelimeGosterOyun();
        durumuGuncelleOyun();
    } else {
        if(kelimeAlani_aa) kelimeAlani_aa.textContent = "Kelime yÃ¼klenemedi!";
    }
}

if (yenidenBaslatBtn_aa) {
    yenidenBaslatBtn_aa.addEventListener('click', oyunBaslat);
}

// =====================================================
// Gezi PlanÄ± YÃ¶netimi (HafÄ±zada ve localStorage'da)
// =====================================================
let aktifGeziPlanlari = [];

function planlariHafizadanYukle() {
    const saklanmisPlanlar = localStorage.getItem('geziPlanlari');
    if (saklanmisPlanlar) {
        aktifGeziPlanlari = JSON.parse(saklanmisPlanlar);
        console.log("Gezi PlanlarÄ±: localStorage'dan yÃ¼klendi:", aktifGeziPlanlari);
    } else {
        aktifGeziPlanlari = [];
        console.log("Gezi PlanlarÄ±: localStorage'da kayÄ±tlÄ± plan bulunamadÄ±.");
    }
}

function planlariLocalStorageKaydet() {
    localStorage.setItem('geziPlanlari', JSON.stringify(aktifGeziPlanlari));
    console.log("Gezi PlanlarÄ±: localStorage'a kaydedildi.");
}

function yeniGeziPlaniEkle(yeniPlan) {
    aktifGeziPlanlari.push(yeniPlan);
    planlariLocalStorageKaydet();
    alert('Gezi planÄ±nÄ±z baÅŸarÄ±yla kaydedildi!');
}
// =====================================================
// KAYITLI GEZÄ° PLANLARINI GÃ–STERME VE SÄ°LME
// =====================================================

/**
 * KaydedilmiÅŸ gezi planlarÄ±nÄ± alÄ±p tabloya ekler.
 */
function planlariTablodaGoster() {
    const planlarTabloGovdesi = document.getElementById('planlarTabloGovdesi');
    const planYokMesaji = document.getElementById('planYokMesaji');
    const planlarTablosu = document.getElementById('planlarTablosu');

    // Bu elementler sadece kayitli-planlar.html'de olacaÄŸÄ± iÃ§in varlÄ±klarÄ±nÄ± kontrol et
    if (!planlarTabloGovdesi || !planYokMesaji || !planlarTablosu) {
        return; // Gerekli elementler yoksa fonksiyondan Ã§Ä±k
    }

    // planlariHafizadanYukle() zaten DOMContentLoaded'da Ã§aÄŸrÄ±lÄ±yor ve
    // aktifGeziPlanlari dizisini dolduruyor. Onu kullanalÄ±m.
    // EÄŸer aktifGeziPlanlari henÃ¼z yÃ¼klenmediyse (ihtimal dÄ±ÅŸÄ± ama Ã¶nlem), tekrar yÃ¼kle.
    if (typeof aktifGeziPlanlari === 'undefined' || aktifGeziPlanlari.length === 0) {
         planlariHafizadanYukle(); // EÄŸer boÅŸsa veya tanÄ±msÄ±zsa tekrar yÃ¼klemeyi dene
    }
    
    planlarTabloGovdesi.innerHTML = ''; // Her seferinde tabloyu temizle

    if (aktifGeziPlanlari.length === 0) {
        planYokMesaji.style.display = 'block';
        planlarTablosu.style.display = 'none';
    } else {
        planYokMesaji.style.display = 'none';
        planlarTablosu.style.display = 'table';

        aktifGeziPlanlari.forEach(function(plan) { // index'e ÅŸimdilik gerek yok, id kullanÄ±yoruz
            const satir = planlarTabloGovdesi.insertRow();
            
            satir.insertCell().textContent = plan.gidilecekYer || '-';
            // Tarih formatlamasÄ±
            const baslangicTarihi = plan.baslangicTarihi ? new Date(plan.baslangicTarihi).toLocaleDateString('tr-TR') : '-';
            satir.insertCell().textContent = baslangicTarihi;
            const bitisTarihi = plan.bitisTarihi ? new Date(plan.bitisTarihi).toLocaleDateString('tr-TR') : '-';
            satir.insertCell().textContent = bitisTarihi;

            satir.insertCell().textContent = plan.konaklamaTuru || '-';
            satir.insertCell().textContent = plan.aktiviteler || '-';
            satir.insertCell().textContent = plan.butceTahmini ? plan.butceTahmini + ' â‚º' : '-';
            satir.insertCell().textContent = plan.ekNotlar || '-';
            
            const silmeHucresi = satir.insertCell();
            const silmeButonu = document.createElement('button');
            silmeButonu.textContent = 'Sil';
            silmeButonu.classList.add('plan-sil-btn'); // CSS ile stil vermek iÃ§in class
            silmeButonu.onclick = function() {
                if (confirm("Bu planÄ± silmek istediÄŸinizden emin misiniz?")) {
                    geziPlaniniSil(plan.id);
                }
            };
            silmeHucresi.appendChild(silmeButonu);
        });
    }
}

/**
 * Belirtilen ID'ye sahip gezi planÄ±nÄ± siler.
 * @param {number} planId - Silinecek planÄ±n benzersiz ID'si.
 */
function geziPlaniniSil(planId) {
    // aktifGeziPlanlari dizisinden planÄ± filtrele
    aktifGeziPlanlari = aktifGeziPlanlari.filter(function(plan) {
        return plan.id !== planId;
    });
    
    // localStorage'Ä± gÃ¼ncelle
    planlariLocalStorageKaydet(); 
    
    // Tabloyu yeniden Ã§iz
    planlariTablodaGoster(); 
    
    alert('Plan baÅŸarÄ±yla silindi!');
}

// DOMContentLoaded olayÄ±na planlariTablodaGoster Ã§aÄŸrÄ±sÄ±nÄ± ekle
// Mevcut DOMContentLoaded fonksiyonunu geniÅŸleteceÄŸiz.
// Bu yÃ¼zden bu script'i mevcut myscript.js'in sonuna ekle
// ve aÅŸaÄŸÄ±daki DOMContentLoaded kÄ±smÄ±nÄ± mevcut olanla birleÅŸtir.

// --- GÃœNCELLENMÄ°Åž DOMContentLoaded ---
document.addEventListener('DOMContentLoaded', function() {
    // Script ilk yÃ¼klendiÄŸinde localStorage'daki planlarÄ± yÃ¼kle
    if (typeof planlariHafizadanYukle === 'function') {
        planlariHafizadanYukle();
    }

    // Adam Asmaca oyununu sadece ilgili sayfada baÅŸlat
    if (document.getElementById('oyunAlani')) {
        if (typeof oyunBaslat === 'function') {
            oyunBaslat();
        } else {
            console.warn("Adam Asmaca: oyunBaslat fonksiyonu bulunamadÄ±.");
        }
    }

    // Gezi PlanÄ± Formu iÃ§in olay dinleyici ekle (sadece ilgili sayfada)
    const geziPlaniFormuElementi = document.getElementById('geziPlaniFormu');
    if (geziPlaniFormuElementi) {
        geziPlaniFormuElementi.addEventListener('submit', function(event) {
            event.preventDefault(); 
            const planObjesi = {
                gidilecekYer: document.getElementById('gidilecekYer').value,
                baslangicTarihi: document.getElementById('baslangicTarihi').value,
                bitisTarihi: document.getElementById('bitisTarihi').value,
                konaklamaTuru: document.getElementById('konaklamaTuru').value,
                aktiviteler: document.getElementById('aktiviteler').value,
                butceTahmini: document.getElementById('butceTahmini').value,
                ekNotlar: document.getElementById('ekNotlar').value,
                id: Date.now() 
            };
            yeniGeziPlaniEkle(planObjesi);
            geziPlaniFormuElementi.reset(); 
        });
    }

    // KayÄ±tlÄ± planlarÄ± tabloda gÃ¶ster (sadece ilgili sayfada)
    if (document.getElementById('planlarTabloGovdesi')) {
        if (typeof planlariTablodaGoster === 'function') {
            planlariTablodaGoster();
        } else {
            console.warn("KayÄ±tlÄ± Planlar: planlariTablodaGoster fonksiyonu bulunamadÄ±.");
        }
    }

    // YorumlarÄ± gÃ¶sterme (index.html iÃ§in)
    if (typeof yorumlariGoster === 'function' && document.getElementById('yorum-listesi')) {
        yorumlariGoster(); 
    } else if (document.getElementById('yorum-listesi')) {
        console.warn("Yorumlar: yorumlariGoster fonksiyonu bulunamadÄ± ama yorum-listesi elementi var.");
    }
});
// Not: index.html iÃ§in yorum ekleme/silme kodlarÄ± bu dosyada deÄŸilse,
// index.html iÃ§indeki <script> bloklarÄ±nda kalmalÄ±dÄ±r. EÄŸer buraya taÅŸÄ±nacaksa
// `DOMContentLoaded` iÃ§ine ve ilgili ID kontrolleriyle eklenmelidir.
// YukarÄ±daki `DOMContentLoaded` iÃ§inde `yorumlariGoster` iÃ§in bir kontrol zaten var.